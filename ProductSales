create database ProductsSales
use ProductsSales

create table products(
	product_code varchar(20) primary key,
	product_name varchar(100),
	price int,
	quantity_remaining int,
	quantity_sold int
);

insert into products values('p1','iphone 13 Pro Max',1200,5,195);
insert into products values('p2','airpods pro',279,10,90);
insert into products values('p3','macbook pro 16',5000,2,48);
insert into products values('p4','ipad air',650,1,9);

select * from products;


create table sales(
	order_id int primary key,
	order_date date,
	product_code varchar(20),
	quantity_ordered int,
	sale_price real
);

insert into sales values(1,'2022-01-10','p1',100,120000);
insert into sales values(2,'2022-01-20','p1',50,60000);
insert into sales values(3,'2022-02-05','p1',45,540000);
insert into sales values(4,'2022-01-15','p2',50,13950);
insert into sales values(5,'2022-03-25','p2',40,11160);
insert into sales values(6,'2022-02-25','p3',10,50000);
insert into sales values(7,'2022-03-15','p3',10,50000);
insert into sales values(8,'2022-03-25','p3',20,100000);
insert into sales values(9,'2022-04-21','p3',8,40000);
insert into sales values(10,'2022-04-27','p4',9,5850);

select * from sales;

--views
--1
create view IncQuaBy10 as
select quantity_remaining,(quantity_remaining+10) as IncreasedQuaBy10 from products
select * from IncQuaBy10;

--2
create view ProductAndSalePrice as
select product_name,sale_price from products join sales on products.product_code=sales.product_code;
select * from ProductAndSalePrice;

--3
create view SalesInMarch as
select product_name,sale_price,order_date from products join sales on products.product_code=sales.product_code where order_date between '2022-03-01' and '2022-03-31'; 
select * from SalesInMarch

--Stored_procedure
--1
create proc iphone13sale 
@product_code varchar(20),
    @quantity_ordered int
as
begin
    IF @product_code = 'P1'
        update products set product_sold = product_sold + @quantity_ordered where product_code = @product_code
        insert into sales(order_date, product_code, quantity_ordered, sales_price) values (GETDATE(), @product_code, @quantity_ordered, (select sales_price from sales where product_code = @product_code) * @quantity_ordered)
end

exec ProcessProductSale 'P1',1; 
select * from sales;



--2
create procedure availableProduct
    @product_code varchar(20),
    @quantity_ordered int
as
begin
    declare @remaining_quantity int
    select @remaining_quantity = product_remaining from products where product_code = @product_code

    if @remaining_quantity >= @quantity_ordered
       
        update products set product_remaining = product_remaining - @quantity_ordered,product_sold = product_sold + @quantity_ordered where product_code = @product_code

        insert into SALES (order_date, product_code, quantity_ordered, sales_price) values (GETDATE(), @product_code, @quantity_ordered, (SELECT sales_price FROM sales WHERE product_code = @product_code) * @quantity_ordered)
end

exec availableProduct 'P1',1;
